<?php
/**
 * @file
 *            Provides ...
 *
 * Kisma(tm) : PHP Nanoframework (http://github.com/Pogostick/kisma/)
 * Copyright 2009-2011, Jerry Ablan/Pogostick, LLC., All Rights Reserved
 *
 * @copyright Copyright (c) 2009-2011 Jerry Ablan/Pogostick, LLC.
 * @license   http://github.com/Pogostick/Kisma/blob/master/LICENSE
 *
 * @author    Jerry Ablan <kisma@pogostick.com>
 * @category  Framework
 * @package   kisma
 * @since     1.0.0
 *
 * @ingroup   framework
 */
namespace Kisma\Core\Enums;
/**
 * Various pre-defined application access levels
 */
class AccessLevel extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Guest;

	/**
	 * @const int Predefined Access Levels
	 */
	const None = -1;
	const Guest = 0;
	const UnconfirmedUser = 1;
	const ConfirmedUser = 2;
	const AuthorizedUser = 3;
	const Admin = 4;
}

/**
 * Property constants
 */
class AccessorMode extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Get;

	/**
	 * @const int Property Accessor Modes
	 */
	const Has = 0;
	const Get = 1;
	const Set = 2;

	/**
	 * @const int PropertyException codes
	 */
	const Undefined = 1000;
	const WriteOnly = 1001;
	const ReadOnly = 1002;
}

/**
 * The various predefined actions that can be used on a form
 */
class ActionButton extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::None;

	/**
	 * @const int The predefined action types
	 */
	const Generic = -1;
	const None = 0;
	const Create = 1;
	const Edit = 2;
	const Save = 3;
	const Delete = 4;
	const Manager = 5;
	const Lock = 6;
	const Unlock = 7;
	const Preview = 8;
	const Back = 9;
	const Cancel = 10;
}

/**
 */
class DebugLevel extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	/**
	 * Default value
	 */
	const __default = self::Normal;

	/**
	 * @const int Debug logging level, they're fairly descriptive ;)
	 */
	const Normal = 0;
	const Verbose = 1;
	const VeryChatty = 2;
	const WillNotShutUp = 3;
	const Nutty = 4;
	const Satanic = 666;

}

/**
 *
 */
class HashSeed extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	/**
	 * Default value
	 */
	const __default = self::All;

	/**
	 * @const int The various supported hash types for Utility\Hash
	 */
	const All = 0;
	const AlphaLower = 1;
	const AlphaUpper = 2;
	const Alpha = 3;
	const AlphaNumeric = 4;
	const AlphaLowerNumeric = 5;
	const Numeric = 6;
	const AlphaLowerNumericIdiotProof = 7;

}

/**
 *
 */
class HashType extends KismaEnum
{
	const __default = self::SHA1;

	/**
	 * @const int Supported hash algorithms
	 */
	const MD5 = 1;
	const SHA1 = 2;
	const CRC32 = 18;
}

/**
 * Validation types and modifiers
 */
class HttpMethod extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Get;

	/**
	 * @const string Available HTTP Methods
	 */
	const Get = 'GET';
	const Put = 'PUT';
	const Head = 'HEAD';
	const Post = 'POST';
	const Delete = 'DELETE';
	const Options = 'OPTIONS';
	const Copy = 'COPY';
}

/**
 *
 */
class OperationMode extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Development;

	/**
	 * @const int Predefined operation modes
	 */
	const Development = 0;
	const Testing = 1;
	const Integration = 2;
	const Production = 3;
}

/**
 */
class PagerLocation extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::TopLeft;

	/**
	 * @const int Where a pager may be located
	 */
	const TopLeft = 0;
	const TopRight = 1;
	const BottomLeft = 2;
	const BottomRight = 3;
}

/**
 */
class QueueStatus extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Queued;

	/**
	 * @const int The status a queued item may have
	 */
	const IgnorableError = -2;
	const Error = -1;
	const Queued = 0;
	const Processing = 1;
	const InProgress = 2;
	const CheckingStatus = 3;
	const Complete = 4;
	const Archiving = 5;
	const Archived = 6;
}

/**
 */
class LogLevel extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Info;

	/**
	 * @const int Individual log entry levels
	 */
	const Emergency = 'emerg';
	const Alert = 'alert';
	const Critical = 'crit';
	const Error = 'err';
	const Warning = 'warn';
	const Notice = 'notice';
	const Info = 'info';
	const Debug = 'debug';
}

/**
 * Defines the available output formats for objects that return or display output.
 */
class OutputFormat extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::JSON;

	/**
	 * @const int output formats
	 */
	const JSON = 0;
	const HTTP = 1;
	const Hash = 2;
	const XML = 3;
	const CSV = 4;
	const CommaSeparated = 4;
	const PSV = 5;
	const PipeSeparated = 5;
	const TSV = 6;
	const TabSeparated = 6;
}

/**
 * Defines the available output formats for objects that return or display output.
 */
class ServiceType extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	const __default = self::Generic;

	/**
	 * @const int service types
	 */
	const Generic = 1;
	const Sapi = 2;
	const Cli = 3;
	const Remote = 4;
}

/**
 * Defines the available validation modes.
 */
class ValidationMode extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	/**
	 * @const int The modes of validation
	 */
	const __default = self::AllFields;
	const AllFields = 0;
	const OneField = 1;
	const StopOnError = 2;
}

/**
 * Validation types and modifiers
 */
class ValidationType extends KismaEnum
{
	//*************************************************************************
	//* Constants
	//*************************************************************************

	/**
	 * @const int The validations of Kisma
	 */
	const Alpha = 0x0001;
	const Numeric = 0x0002;
	const Alphanumeric = 0x0003;
	const Within = 0x0004;
	const Between = 0x0008;
	const Date = 0x0010;
	const DateTime = 0x0020;
	const Character = 0x0040;
	const Digit = 0x0080;
	const MaxLength = 0x0800;
	const MinLength = 0x1000;
	const In = 0x2000;

	/**
	 * @const int Modifiers
	 */
	const EqualTo = 0xffff0001;
	const NotEqualTo = 0xffff0002;
	const GreaterThan = 0xffff0004;
	const LessThan = 0xffff0008;
	const GreaterThanOrEqualTo = 0xffff0005;
	const LessThanOrEqualTo = 0xffff0009;
}
