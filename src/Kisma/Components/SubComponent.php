<?php
/**
 * @file
 * Provides a base for Kisma objects
 *
 * Kisma(tm) : PHP Nanoframework (http://github.com/Pogostick/kisma/)
 * Copyright 2009-2011, Jerry Ablan/Pogostick, LLC., All Rights Reserved
 *
 * @copyright Copyright (c) 2009-2011 Jerry Ablan/Pogostick, LLC.
 * @license http://github.com/Pogostick/Kisma/blob/master/LICENSE
 *
 * @author Jerry Ablan <kisma@pogostick.com>
 * @category Silex
 * @package kisma.components
 * @since 1.0.0
 *
 * @ingroup silex
 */

namespace Kisma\Components;

use Kisma\Utility\Property;

/**
 * SubComponent
 * A small class that will set properties passed in through construction.
 *
 * Basics
 * ======
 * SubComponent is the base class of most Kisma classes.
 *
 * Features
 * ========
 *   o  Property and option management
 *
 * Properties: Always exist, and always have a default value.
 * ===========================================================================
 *
 * @property array $options
 * @property int $index
 * @property int $count
 * @property boolean $skipNext
 * @property string $objectId A unique object ID generated by spl_object_hash
 * @property bool $propertiesRequired If true, trying to set an undefined property will result in and UndefinedPropertyException
 */
abstract class SubComponent implements \Kisma\IKisma, \Kisma\IConfigurable, \Countable, \Iterator
{
	//*************************************************************************
	//* Private Members
	//*************************************************************************

	/**
	 * @var array This object's options
	 */
	protected $_options = array();
	/**
	 * @var integer Iteration index
	 */
	protected $_index = 0;
	/**
	 * @var integer Holds the number of settings we have
	 */
	protected $_count = 0;
	/**
	 * @var boolean Used when un-setting values during iteration to ensure we do not skip the next element
	 */
	protected $_skipNext = false;
	/**
	 * @var string My unique object ID
	 */
	protected $_objectId = null;
	/**
	 * @var bool If true, setting an undefined property throws an exception
	 */
	protected $_propertiesRequired = false;

	//*************************************************************************
	//* Default/Magic Methods
	//*************************************************************************

	/**
	 * The base component constructor
	 *
	 * @param object|array $options
	 *
	 * @return \Kisma\Components\SubComponent
	 */
	public function __construct( $options = array() )
	{
		//	Create our hash...
		$this->_objectId = spl_object_hash( $this );

		//	Configure our options/properties
		$this->setOptions( $options, true );
	}

	/**
	 * Destructor stub
	 */
	public function __destruct()
	{
		//	Does nothing, but allows references from subclasses
	}

	/**
	 * @param string	 $name
	 * @param mixed|null $value
	 *
	 * @return mixed
	 */
	public function setOption( $name, $value = null )
	{
		try
		{
			Property::property( $this->_options, $name, \Kisma\AccessorMode::Set, $value );
		}
		catch ( \Kisma\UndefinedPropertyException $_ex )
		{
			if ( true === $this->_propertiesRequired )
			{
				throw $_ex;
			}

			//	Ignored...
		}

		return $this;
	}

	/**
	 * @return array
	 */
	public function &getOptions()
	{
		return $this->_options;
	}

	//*************************************************************************
	//* Interface Methods
	//*************************************************************************

	/**
	 * Required by Countable interface
	 *
	 * @return int
	 */
	public function count()
	{
		return $this->_count;
	}

	/**
	 * Required by Iterator interface
	 *
	 * @return mixed
	 */
	public function current()
	{
		$this->_skipNext = false;
		return current( $this->_options );
	}

	/**
	 * Required by Iterator interface
	 *
	 * @return mixed
	 */
	public function key()
	{
		return key( $this->_options );
	}

	/**
	 * Required by Iterator interface
	 */
	public function next()
	{
		if ( $this->_skipNext )
		{
			$this->_skipNext = false;
			return;
		}

		next( $this->_options );

		$this->_index++;
	}

	/**
	 * Required by Iterator interface
	 */
	public function rewind()
	{
		$this->_skipNext = false;
		reset( $this->_options );
		$this->_index = 0;
	}

	/**
	 * Required by Iterator interface
	 *
	 * @return boolean
	 */
	public function valid()
	{
		return ( $this->_index < $this->_count );
	}

	//*************************************************************************
	//* Properties
	//*************************************************************************

	/**
	 * Loads an array into properties if they exist.
	 *
	 * @param object|array $options
	 * @param bool		 $mergeOptions If false, this object's options will be cleared first
	 *
	 * @return void
	 */
	public function setOptions( $options = array(), $mergeOptions = true )
	{
		//	Catch null input, non-traversable, or empty options
		if ( null === $options || !( $options instanceof \Traversable ) || empty( $options ) )
		{
			$options = array();
		}

		//	Set our own options and work from there
		if ( true !== $mergeOptions || !is_array( $options ) )
		{
			//	Overwrite the options...
			$this->_options = $options;
		}
		else
		{
			//	Merge the options...
			$this->_options = array_merge( $this->_options, $options );
		}

		//	Loop through, set...
		foreach ( $this->_options as $_key => $_value )
		{
			$this->setOption( $_key, $_value );
		}

		$this->_count = count( $this->_options );

		return $this;
	}

	/**
	 * @param int $count
	 *
	 * @return \Kisma\Components\SubComponent
	 */
	public function setCount( $count )
	{
		$this->_count = $count;
		return $this;
	}

	/**
	 * @return int
	 */
	public function getCount()
	{
		return $this->_count;
	}

	/**
	 * @param int $index
	 *
	 * @return \Kisma\Components\SubComponent
	 */
	public function setIndex( $index )
	{
		$this->_index = $index;
		return $this;
	}

	/**
	 * @return int
	 */
	public function getIndex()
	{
		return $this->_index;
	}

	/**
	 * @param string $objectId
	 *
	 * @return \Kisma\Components\SubComponent
	 */
	public function setObjectId( $objectId )
	{
		$this->_objectId = $objectId;
		return $this;
	}

	/**
	 * @return string
	 */
	public function getObjectId()
	{
		return $this->_objectId;
	}

	/**
	 * @param boolean $propertiesRequired
	 *
	 * @return \Kisma\Components\SubComponent
	 */
	public function setPropertiesRequired( $propertiesRequired )
	{
		$this->_propertiesRequired = $propertiesRequired;
		return $this;
	}

	/**
	 * @return boolean
	 */
	public function getPropertiesRequired()
	{
		return $this->_propertiesRequired;
	}

	/**
	 * @param boolean $skipNext
	 *
	 * @return \Kisma\Components\SubComponent
	 */
	public function setSkipNext( $skipNext )
	{
		$this->_skipNext = $skipNext;
		return $this;
	}

	/**
	 * @return boolean
	 */
	public function getSkipNext()
	{
		return $this->_skipNext;
	}

}

