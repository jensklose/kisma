<?php
namespace Kisma\Core;

require_once __DIR__ . '/SeedTest_Object.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-13 at 23:27:16.
 */
class SeedTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var \SeedTest_Object
	 */
	protected $_object;
	/**
	 * @var int
	 */
	protected $_destructorEventFired = 0;

	/**
	 * @param int $how Used to capture the destructor event in the fixture
	 */
	public function destructorEventFired( $how = 0 )
	{
		$this->_destructorEventFired += ( empty( $how ) ? 0 : 1 );
	}

	/**
	 * Creates our test object
	 */
	protected function setUp()
	{
		$this->_object = new \SeedTest_Object(
			array(
				'itemOne'   => 1,
				'itemTwo'   => 2,
				'itemThree' => 3,
			),
			$this
		);

	}

	/**
	 * @covers Kisma\Core\Seed::onBeforeDestruct
	 */
	public function testOnBeforeDestruct()
	{
		$this->_destructorEventFired = 0;
		$this->_object->__destruct();
		$this->assertTrue( $this->_destructorEventFired > 0, 'Destructor event was not fired.' );
	}

	/**
	 * @covers Kisma\Core\Seed::onAfterConstruct
	 * @covers Kisma\Core\Seed::__wakeup
	 * @covers Kisma\Core\Seed::trigger
	 * @covers Kisma\Core\Seed::getDefaultSettings
	 * @covers Kisma\Core\Utility\EventManager::subscribe
	 * @covers Kisma\Core\Utility\EventManager::discover
	 * @covers Kisma\Core\Utility\EventManager::publish
	 * @covers Kisma\Core\Utility\EventManager::getEventMap
	 * @covers Kisma\Core\Seed::getServiceClass
	 * @covers Kisma\Core\Seed::addServiceClass
	 * @covers Kisma\Core\Seed::setDiscoverEvents
	 * @covers Kisma\Core\Seed::getDiscoverEvents
	 */
	public function testOnAfterConstruct()
	{
		$this->assertTrue( false !== $this->_object->constructEvent );
	}

	/**
	 * @covers Kisma\Core\Seed::__call
	 */
	public function test__call()
	{
		$_one = $this->_object->getItemOne();
		$this->assertTrue( 1 == $_one );

		$_two = $this->_object->get_item_two();
		$this->assertTrue( 2 == $_two );
	}

	/**
	 * @covers Kisma\Core\Seed::get
	 */
	public function testGet()
	{
		$this->assertTrue( 1 == $this->_object->get( 'itemOne' ) );
		$this->assertTrue( 2 == $this->_object->get( 'itemTwo' ) );
		$this->assertTrue( 3 == $this->_object->get( 'itemThree' ) );
	}

	/**
	 * @covers Kisma\Core\Seed::set
	 */
	public function testSet()
	{
		$this->_object->set( 'itemOne', 10 );
		$this->_object->set( 'itemTwo', 20, false );
		$this->_object->set( 'itemThree', 30 );

		//	New
		$this->_object->setItemFour( 4 );

		$this->assertTrue( 10 == $this->_object->get( 'itemOne' ) );
		$this->assertTrue( 2 == $this->_object->get( 'itemTwo' ) );
		$this->assertTrue( 30 == $this->_object->get( 'itemThree' ) );
		$this->assertTrue( 4 == $this->_object->get( 'itemFour' ) );
	}

	/**
	 * @covers Kisma\Core\Seed::getId
	 */
	public function testGetId()
	{
		$this->assertNotEmpty(
			$_id = $this->_object->getId(),
			'The object ID has not been set properly.'
		);

		print( 'Object ID: ' . $_id );
	}

	/**
	 * @covers Kisma\Core\Seed::getTag
	 * @covers Kisma\Core\Seed::setTag
	 * @covers Kisma\Core\Seed::getName
	 * @covers Kisma\Core\Seed::setName
	 * @covers Kisma\Core\Seed::getServiceMap
	 * @covers Kisma\Core\Seed::setServiceMap
	 */
	public function testGetTag()
	{
		$this->assertTrue( is_string( $this->_object->getTag() ) );
	}

	/**
	 * @covers Kisma\Core\Seed::setSettings
	 */
	public function testSetSettings()
	{
	}

	/**
	 * @covers Kisma\Core\Seed::getSettings
	 */
	public function testGetSettings()
	{
		$this->assertTrue( $this->_object->getSettings() instanceof \Kisma\Core\Interfaces\StorageProvider );
	}

}
